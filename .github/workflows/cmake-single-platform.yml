# This starter workflow is for a CMake project running on a single platform. There is a different starter workflow if you need cross-platform coverage.
# See: https://github.com/actions/starter-workflows/blob/main/ci/cmake-multi-platform.yml
name: CMake on a single platform

on:
  push:
    branches: [ "**" ]
  pull_request:
    branches: [ "**" ]

env:
  # Customize the CMake build type here (Release, Debug, RelWithDebInfo, etc.)
  BUILD_TYPE: Release

jobs:
  build:
    # The CMake configure and build commands are platform agnostic and should work equally well on Windows or Mac.
    # You can convert this to a matrix build if you need cross-platform coverage.
    # See: https://docs.github.com/en/free-pro-team@latest/actions/learn-github-actions/managing-complex-workflows#using-a-build-matrix
    runs-on: ubuntu-latest

    steps:
    - uses: actions/checkout@v3

    - name: Cache dependencies
      uses: actions/cache@v2
      with:
        path: |
          ~/.cache
        key: ${{ runner.os }}-deps

    - name: Update packges
      run: sudo apt update

    - name: Install SDL2
      run: sudo apt install -y libsdl2-dev

    - name: Install OpenCV
      run: |
        if [ ! -d "$HOME/.cache/opencv" ]; then
          git clone https://github.com/opencv/opencv.git --branch 4.9.0 $HOME/.cache/opencv
          cd $HOME/.cache/opencv
          mkdir -p build
          cd build
          cmake ..
          cmake --build .
        fi;
        cd "$HOME/.cache/opencv/build";
        sudo make install;

    - name: Install SDL2_image
      run: |
        if [ ! -d "$HOME/.cache/SDL_image" ]; then
          git clone https://github.com/libsdl-org/SDL_image --branch release-2.8.2 $HOME/.cache/SDL_image
          cd $HOME/.cache/SDL_image
          mkdir -p build
          cd build
          cmake ..
          cmake --build .
        fi;
        cd "$HOME/.cache/SDL_image/build";
        sudo make install;

    - name: Configure CMake
      # Configure CMake in a 'build' subdirectory. `CMAKE_BUILD_TYPE` is only required if you are using a single-configuration generator such as make.
      # See https://cmake.org/cmake/help/latest/variable/CMAKE_BUILD_TYPE.html?highlight=cmake_build_type
      run: cmake -B ${{github.workspace}}/build -DCMAKE_BUILD_TYPE=${{env.BUILD_TYPE}}

    - name: Build
      # Build your program with the given configuration
      run: cmake --build ${{github.workspace}}/build --config ${{env.BUILD_TYPE}}
  release:
    needs: build
    runs-on: ubuntu-latest
    if: startsWith(github.ref, 'refs/tags/')

    steps:
    - name: Download Binaries
      uses: actions/download-artifact@v2
      with:
        name: binaries
        path: ${{ github.workspace }}/binaries

    - name: Create Release
      id: create_release
      uses: actions/create-release@v1
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      with:
        tag_name: ${{ github.ref }}
        release_name: Release ${{ github.ref }}
        body: |
          Binary artifacts for release ${{ github.ref }}.
      # Note: This action outputs the ID of the created release in a `release_id` output

    - name: Upload Release Asset
      id: upload-release-asset
      uses: actions/upload-release-asset@v1
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      with:
        upload_url: ${{ steps.create_release.outputs.upload_url }}
        asset_path: ${{ github.workspace }}/binaries
        asset_name: binaries
        asset_content_type: application/octet-stream

